<?php

namespace mozzler\rbac\filters;

use Yii;

//use yii\base\ActionFilter;
use yii\base\Controller;
use yii\web\ForbiddenHttpException;
use filsh\yii2\oauth2server\exceptions\HttpException;

class RbacFilter extends \yii\base\Behavior
{

    public function events()
    {
        return [
            Controller::EVENT_BEFORE_ACTION => 'beforeAction'
        ];
    }

    public function beforeAction($event)
    {
        // Check if OAuth2 token is valid
        $oauthEnabled = false;
        $isValid = true;

        if (\Yii::$app->getModule('oauth2')) {
            $oauthEnabled = true;
            $response = \Yii::$app->getModule('oauth2')->getServer()->getResponse();

            $isValid = true;
            if ($response !== null) {
                // Flag if we have an invalid or malformed token
                //
                // Note: If no token is supplied, isValid remains true (need to allow for public actions
                // to still be accessed where no token is supplied)
                if (in_array($response->getParameter('error'), ['invalid_token', 'malformed_token'])) {
                    $isValid = false;
                }
            }
        }

        // If we have an invalid OAuth2 request raise a HttpException inline with the response error
        // generated by the OAuth2 library
        if ($oauthEnabled && !$isValid) {
            if ($response) {
                throw new HttpException($response->getStatusCode(), $this->getErrorMessage($response), $response->getParameter('error_uri'));
            }
        }

        // We have either:
        //  1. Logged in successfully using OAuth Bearer tokens for an API request
        //  2. Logged in successfully using a traditional cookie session for a non-API request
        //  3. Made an API request without supplying an Bearer token (so still need to check for Public access)
        //
        // Check if RBAC permissions permit access to this controller
        if (!\Yii::$app->rbac->canAccessAction($event->action)) {
            if (\Yii::$app->has('user') && !\Yii::$app->user->getIdentity()) {
                // You aren't logged in, so redirect to the login page
                \Yii::error("You aren't logged in, can't access the page, so redirecting to the login page.");
                $event->isValid = false;
                $event->handled = true;
                $redirectParam = \Yii::$app->getRequest()->getUrl();
                \Yii::$app->getSession()->addFlash('warning', "Can't access page, try logging in first", false);
                \Yii::$app->getSession()->set('postLoginRedirect', $redirectParam);
                \Yii::$app->getResponse()->redirect('/user/login?hasRedirect=true')->send();
                return;
            } else {
                \Yii::error("No permission to access the page");
                throw new ForbiddenHttpException("No permission to access this page");
            }
        }
    }

    protected function getErrorMessage(\OAuth2\Response $response)
    {
        $message = \Yii::$app->getModule('oauth2')->t('common', $response->getParameter('error_description'));
        if ($message === null) {
            $message = \Yii::$app->getModule('oauth2')->t('common', 'An internal server error occurred.');
        }
        return $message;
    }

}